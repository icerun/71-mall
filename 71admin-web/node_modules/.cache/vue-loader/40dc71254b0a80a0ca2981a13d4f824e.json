{"remainingRequest":"D:\\myworkspce\\myproject\\71\\71admin-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\myworkspce\\myproject\\71\\71admin-web\\src\\views\\system\\role\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\myworkspce\\myproject\\71\\71admin-web\\src\\views\\system\\role\\index.vue","mtime":1599936494940},{"path":"D:\\myworkspce\\myproject\\71\\71admin-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\myworkspce\\myproject\\71\\71admin-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\myworkspce\\myproject\\71\\71admin-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\myworkspce\\myproject\\71\\71admin-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport crudRoles from '@/api/system/role'\r\nimport { getDepts, getDeptSuperior } from '@/api/system/dept'\r\nimport { getMenusTree } from '@/api/system/menu'\r\nimport CRUD, { presenter, header, form, crud } from '@crud/crud'\r\nimport rrOperation from '@crud/RR.operation'\r\nimport crudOperation from '@crud/CRUD.operation'\r\nimport udOperation from '@crud/UD.operation'\r\nimport pagination from '@crud/Pagination'\r\nimport Treeselect from '@riophae/vue-treeselect'\r\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css'\r\nimport { LOAD_CHILDREN_OPTIONS } from '@riophae/vue-treeselect'\r\nimport DateRangePicker from '@/components/DateRangePicker'\r\n\r\nconst defaultForm = { id: null, name: null, depts: [], description: null, dataScope: '全部', level: 3 }\r\nexport default {\r\n  name: 'Role',\r\n  components: { Treeselect, pagination, crudOperation, rrOperation, udOperation, DateRangePicker },\r\n  cruds() {\r\n    return CRUD({ title: '角色', url: 'api/roles', sort: 'level,asc', crudMethod: { ...crudRoles }})\r\n  },\r\n  mixins: [presenter(), header(), form(defaultForm), crud()],\r\n  data() {\r\n    return {\r\n      defaultProps: { children: 'children', label: 'label', isLeaf: 'leaf' },\r\n      dateScopes: ['全部', '本级', '自定义'], level: 3,\r\n      currentId: 0, menuLoading: false, showButton: false,\r\n      menus: [], menuIds: [], depts: [], deptDatas: [], // 多选时使用\r\n      permission: {\r\n        add: ['admin', 'roles:add'],\r\n        edit: ['admin', 'roles:edit'],\r\n        del: ['admin', 'roles:del']\r\n      },\r\n      rules: {\r\n        name: [\r\n          { required: true, message: '请输入名称', trigger: 'blur' }\r\n        ],\r\n        permission: [\r\n          { required: true, message: '请输入权限', trigger: 'blur' }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    crudRoles.getLevel().then(data => {\r\n      this.level = data.level\r\n    })\r\n  },\r\n  methods: {\r\n    getMenuDatas(node, resolve) {\r\n      setTimeout(() => {\r\n        getMenusTree(node.data.id ? node.data.id : 0).then(res => {\r\n          resolve(res)\r\n        })\r\n      }, 100)\r\n    },\r\n    [CRUD.HOOK.afterRefresh]() {\r\n      this.$refs.menu.setCheckedKeys([])\r\n    },\r\n    // 新增前初始化部门信息\r\n    [CRUD.HOOK.beforeToAdd]() {\r\n      this.deptDatas = []\r\n    },\r\n    // 编辑前初始化自定义数据权限的部门信息\r\n    [CRUD.HOOK.beforeToEdit](crud, form) {\r\n      this.deptDatas = []\r\n      if (form.dataScope === '自定义') {\r\n        this.getSupDepts(form.depts)\r\n      }\r\n      const _this = this\r\n      form.depts.forEach(function(dept) {\r\n        _this.deptDatas.push(dept.id)\r\n      })\r\n    },\r\n    // 提交前做的操作\r\n    [CRUD.HOOK.afterValidateCU](crud) {\r\n      if (crud.form.dataScope === '自定义' && this.deptDatas.length === 0) {\r\n        this.$message({\r\n          message: '自定义数据权限不能为空',\r\n          type: 'warning'\r\n        })\r\n        return false\r\n      } else if (crud.form.dataScope === '自定义') {\r\n        const depts = []\r\n        this.deptDatas.forEach(function(data) {\r\n          const dept = { id: data }\r\n          depts.push(dept)\r\n        })\r\n        crud.form.depts = depts\r\n      } else {\r\n        crud.form.depts = []\r\n      }\r\n      return true\r\n    },\r\n    // 触发单选\r\n    handleCurrentChange(val) {\r\n      if (val) {\r\n        const _this = this\r\n        // 清空菜单的选中\r\n        this.$refs.menu.setCheckedKeys([])\r\n        // 保存当前的角色id\r\n        this.currentId = val.id\r\n        // 初始化默认选中的key\r\n        this.menuIds = []\r\n        val.menus.forEach(function(data) {\r\n          _this.menuIds.push(data.id)\r\n        })\r\n        this.showButton = true\r\n      }\r\n    },\r\n    menuChange(menu) {\r\n      // 判断是否在 menuIds 中，如果存在则删除，否则添加\r\n      const index = this.menuIds.indexOf(menu.id)\r\n      if (index !== -1) {\r\n        this.menuIds.splice(index, 1)\r\n      } else {\r\n        this.menuIds.push(menu.id)\r\n      }\r\n    },\r\n    // 保存菜单\r\n    saveMenu() {\r\n      this.menuLoading = true\r\n      const role = { id: this.currentId, menus: [] }\r\n      // 得到已选中的 key 值\r\n      this.menuIds.forEach(function(id) {\r\n        const menu = { id: id }\r\n        role.menus.push(menu)\r\n      })\r\n      crudRoles.editMenu(role).then(() => {\r\n        this.crud.notify('保存成功', CRUD.NOTIFICATION_TYPE.SUCCESS)\r\n        this.menuLoading = false\r\n        this.update()\r\n      }).catch(err => {\r\n        this.menuLoading = false\r\n        console.log(err.response.data.message)\r\n      })\r\n    },\r\n    // 改变数据\r\n    update() {\r\n      // 无刷新更新 表格数据\r\n      crudRoles.get(this.currentId).then(res => {\r\n        for (let i = 0; i < this.crud.data.length; i++) {\r\n          if (res.id === this.crud.data[i].id) {\r\n            this.crud.data[i] = res\r\n            break\r\n          }\r\n        }\r\n      })\r\n    },\r\n    // 获取部门数据\r\n    getDepts() {\r\n      getDepts({ enabled: true }).then(res => {\r\n        this.depts = res.content.map(function(obj) {\r\n          if (obj.hasChildren) {\r\n            obj.children = null\r\n          }\r\n          return obj\r\n        })\r\n      })\r\n    },\r\n    getSupDepts(depts) {\r\n      const ids = []\r\n      depts.forEach(dept => {\r\n        ids.push(dept.id)\r\n      })\r\n      getDeptSuperior(ids).then(res => {\r\n        const date = res.content\r\n        this.buildDepts(date)\r\n        this.depts = date\r\n      })\r\n    },\r\n    buildDepts(depts) {\r\n      depts.forEach(data => {\r\n        if (data.children) {\r\n          this.buildDepts(data.children)\r\n        }\r\n        if (data.hasChildren && !data.children) {\r\n          data.children = null\r\n        }\r\n      })\r\n    },\r\n    // 获取弹窗内部门数据\r\n    loadDepts({ action, parentNode, callback }) {\r\n      if (action === LOAD_CHILDREN_OPTIONS) {\r\n        getDepts({ enabled: true, pid: parentNode.id }).then(res => {\r\n          parentNode.children = res.content.map(function(obj) {\r\n            if (obj.hasChildren) {\r\n              obj.children = null\r\n            }\r\n            return obj\r\n          })\r\n          setTimeout(() => {\r\n            callback()\r\n          }, 200)\r\n        })\r\n      }\r\n    },\r\n    // 如果数据权限为自定义则获取部门数据\r\n    changeScope() {\r\n      if (this.form.dataScope === '自定义') {\r\n        this.getDepts()\r\n      }\r\n    },\r\n    checkboxT(row) {\r\n      return row.level >= this.level\r\n    }\r\n  }\r\n}\r\n",null]}