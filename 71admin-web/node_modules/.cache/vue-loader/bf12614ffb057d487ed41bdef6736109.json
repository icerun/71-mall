{"remainingRequest":"D:\\myworkspce\\myproject\\71\\71admin-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\myworkspce\\myproject\\71\\71admin-web\\src\\views\\system\\user\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\myworkspce\\myproject\\71\\71admin-web\\src\\views\\system\\user\\index.vue","mtime":1599936494942},{"path":"D:\\myworkspce\\myproject\\71\\71admin-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\myworkspce\\myproject\\71\\71admin-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\myworkspce\\myproject\\71\\71admin-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\myworkspce\\myproject\\71\\71admin-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport crudUser from '@/api/system/user'\r\nimport { isvalidPhone } from '@/utils/validate'\r\nimport { getDepts, getDeptSuperior } from '@/api/system/dept'\r\nimport { getAll, getLevel } from '@/api/system/role'\r\nimport { getAllJob } from '@/api/system/job'\r\nimport CRUD, { presenter, header, form, crud } from '@crud/crud'\r\nimport rrOperation from '@crud/RR.operation'\r\nimport crudOperation from '@crud/CRUD.operation'\r\nimport udOperation from '@crud/UD.operation'\r\nimport pagination from '@crud/Pagination'\r\nimport DateRangePicker from '@/components/DateRangePicker'\r\nimport Treeselect from '@riophae/vue-treeselect'\r\nimport { mapGetters } from 'vuex'\r\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css'\r\nimport { LOAD_CHILDREN_OPTIONS } from '@riophae/vue-treeselect'\r\nlet userRoles = []\r\nlet userJobs = []\r\nconst defaultForm = { id: null, username: null, nickName: null, gender: '男', email: null, enabled: 'false', roles: [], jobs: [], dept: { id: null }, phone: null }\r\nexport default {\r\n  name: 'User',\r\n  components: { Treeselect, crudOperation, rrOperation, udOperation, pagination, DateRangePicker },\r\n  cruds() {\r\n    return CRUD({ title: '用户', url: 'api/users', crudMethod: { ...crudUser }})\r\n  },\r\n  mixins: [presenter(), header(), form(defaultForm), crud()],\r\n  // 数据字典\r\n  dicts: ['user_status'],\r\n  data() {\r\n    // 自定义验证\r\n    const validPhone = (rule, value, callback) => {\r\n      if (!value) {\r\n        callback(new Error('请输入电话号码'))\r\n      } else if (!isvalidPhone(value)) {\r\n        callback(new Error('请输入正确的11位手机号码'))\r\n      } else {\r\n        callback()\r\n      }\r\n    }\r\n    return {\r\n      height: document.documentElement.clientHeight - 180 + 'px;',\r\n      deptName: '', depts: [], deptDatas: [], jobs: [], level: 3, roles: [],\r\n      jobDatas: [], roleDatas: [], // 多选时使用\r\n      defaultProps: { children: 'children', label: 'name', isLeaf: 'leaf' },\r\n      permission: {\r\n        add: ['admin', 'user:add'],\r\n        edit: ['admin', 'user:edit'],\r\n        del: ['admin', 'user:del']\r\n      },\r\n      enabledTypeOptions: [\r\n        { key: 'true', display_name: '激活' },\r\n        { key: 'false', display_name: '锁定' }\r\n      ],\r\n      rules: {\r\n        username: [\r\n          { required: true, message: '请输入用户名', trigger: 'blur' },\r\n          { min: 2, max: 20, message: '长度在 2 到 20 个字符', trigger: 'blur' }\r\n        ],\r\n        nickName: [\r\n          { required: true, message: '请输入用户昵称', trigger: 'blur' },\r\n          { min: 2, max: 20, message: '长度在 2 到 20 个字符', trigger: 'blur' }\r\n        ],\r\n        email: [\r\n          { required: true, message: '请输入邮箱地址', trigger: 'blur' },\r\n          { type: 'email', message: '请输入正确的邮箱地址', trigger: 'blur' }\r\n        ],\r\n        phone: [\r\n          { required: true, trigger: 'blur', validator: validPhone }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters([\r\n      'user'\r\n    ])\r\n  },\r\n  created() {\r\n    this.crud.msg.add = '新增成功，默认密码：123456'\r\n  },\r\n  mounted: function() {\r\n    const that = this\r\n    window.onresize = function temp() {\r\n      that.height = document.documentElement.clientHeight - 180 + 'px;'\r\n    }\r\n  },\r\n  methods: {\r\n    changeRole(value) {\r\n      userRoles = []\r\n      value.forEach(function(data, index) {\r\n        const role = { id: data }\r\n        userRoles.push(role)\r\n      })\r\n    },\r\n    changeJob(value) {\r\n      userJobs = []\r\n      value.forEach(function(data, index) {\r\n        const job = { id: data }\r\n        userJobs.push(job)\r\n      })\r\n    },\r\n    deleteTag(value) {\r\n      userRoles.forEach(function(data, index) {\r\n        if (data.id === value) {\r\n          userRoles.splice(index, value)\r\n        }\r\n      })\r\n    },\r\n    // 新增与编辑前做的操作\r\n    [CRUD.HOOK.afterToCU](crud, form) {\r\n      this.getRoles()\r\n      if (form.id == null) {\r\n        this.getDepts()\r\n      } else {\r\n        this.getSupDepts(form.dept.id)\r\n      }\r\n      this.getRoleLevel()\r\n      this.getJobs()\r\n      form.enabled = form.enabled.toString()\r\n    },\r\n    // 新增前将多选的值设置为空\r\n    [CRUD.HOOK.beforeToAdd]() {\r\n      this.jobDatas = []\r\n      this.roleDatas = []\r\n    },\r\n    // 初始化编辑时候的角色与岗位\r\n    [CRUD.HOOK.beforeToEdit](crud, form) {\r\n      this.getJobs(this.form.dept.id)\r\n      this.jobDatas = []\r\n      this.roleDatas = []\r\n      userRoles = []\r\n      userJobs = []\r\n      const _this = this\r\n      form.roles.forEach(function(role, index) {\r\n        _this.roleDatas.push(role.id)\r\n        const rol = { id: role.id }\r\n        userRoles.push(rol)\r\n      })\r\n      form.jobs.forEach(function(job, index) {\r\n        _this.jobDatas.push(job.id)\r\n        const data = { id: job.id }\r\n        userJobs.push(data)\r\n      })\r\n    },\r\n    // 提交前做的操作\r\n    [CRUD.HOOK.afterValidateCU](crud) {\r\n      if (!crud.form.dept.id) {\r\n        this.$message({\r\n          message: '部门不能为空',\r\n          type: 'warning'\r\n        })\r\n        return false\r\n      } else if (this.jobDatas.length === 0) {\r\n        this.$message({\r\n          message: '岗位不能为空',\r\n          type: 'warning'\r\n        })\r\n        return false\r\n      } else if (this.roleDatas.length === 0) {\r\n        this.$message({\r\n          message: '角色不能为空',\r\n          type: 'warning'\r\n        })\r\n        return false\r\n      }\r\n      crud.form.roles = userRoles\r\n      crud.form.jobs = userJobs\r\n      return true\r\n    },\r\n    // 获取左侧部门数据\r\n    getDeptDatas(node, resolve) {\r\n      const sort = 'id,desc'\r\n      const params = { sort: sort }\r\n      if (typeof node !== 'object') {\r\n        if (node) {\r\n          params['name'] = node\r\n        }\r\n      } else if (node.level !== 0) {\r\n        params['pid'] = node.data.id\r\n      }\r\n      setTimeout(() => {\r\n        getDepts(params).then(res => {\r\n          if (resolve) {\r\n            resolve(res.content)\r\n          } else {\r\n            this.deptDatas = res.content\r\n          }\r\n        })\r\n      }, 100)\r\n    },\r\n    getDepts() {\r\n      getDepts({ enabled: true }).then(res => {\r\n        this.depts = res.content.map(function(obj) {\r\n          if (obj.hasChildren) {\r\n            obj.children = null\r\n          }\r\n          return obj\r\n        })\r\n      })\r\n    },\r\n    getSupDepts(deptId) {\r\n      getDeptSuperior(deptId).then(res => {\r\n        const date = res.content\r\n        this.buildDepts(date)\r\n        this.depts = date\r\n      })\r\n    },\r\n    buildDepts(depts) {\r\n      depts.forEach(data => {\r\n        if (data.children) {\r\n          this.buildDepts(data.children)\r\n        }\r\n        if (data.hasChildren && !data.children) {\r\n          data.children = null\r\n        }\r\n      })\r\n    },\r\n    // 获取弹窗内部门数据\r\n    loadDepts({ action, parentNode, callback }) {\r\n      if (action === LOAD_CHILDREN_OPTIONS) {\r\n        getDepts({ enabled: true, pid: parentNode.id }).then(res => {\r\n          parentNode.children = res.content.map(function(obj) {\r\n            if (obj.hasChildren) {\r\n              obj.children = null\r\n            }\r\n            return obj\r\n          })\r\n          setTimeout(() => {\r\n            callback()\r\n          }, 200)\r\n        })\r\n      }\r\n    },\r\n    // 切换部门\r\n    handleNodeClick(data) {\r\n      if (data.pid === 0) {\r\n        this.query.deptId = null\r\n      } else {\r\n        this.query.deptId = data.id\r\n      }\r\n      this.crud.toQuery()\r\n    },\r\n    // 改变状态\r\n    changeEnabled(data, val) {\r\n      this.$confirm('此操作将 \"' + this.dict.label.user_status[val] + '\" ' + data.username + ', 是否继续？', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        crudUser.edit(data).then(res => {\r\n          this.crud.notify(this.dict.label.user_status[val] + '成功', CRUD.NOTIFICATION_TYPE.SUCCESS)\r\n        }).catch(() => {\r\n          data.enabled = !data.enabled\r\n        })\r\n      }).catch(() => {\r\n        data.enabled = !data.enabled\r\n      })\r\n    },\r\n    // 获取弹窗内角色数据\r\n    getRoles() {\r\n      getAll().then(res => {\r\n        this.roles = res\r\n      }).catch(() => { })\r\n    },\r\n    // 获取弹窗内岗位数据\r\n    getJobs() {\r\n      getAllJob().then(res => {\r\n        this.jobs = res.content\r\n      }).catch(() => { })\r\n    },\r\n    // 获取权限级别\r\n    getRoleLevel() {\r\n      getLevel().then(res => {\r\n        this.level = res.level\r\n      }).catch(() => { })\r\n    },\r\n    checkboxT(row, rowIndex) {\r\n      return row.id !== this.user.id\r\n    }\r\n  }\r\n}\r\n",null]}